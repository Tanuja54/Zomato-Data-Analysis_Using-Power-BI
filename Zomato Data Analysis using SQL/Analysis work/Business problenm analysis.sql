USE ZOMATO_DB;

-- handlinng null values
SELECT * FROM ORDERS
WHERE
CUSTOMER_ID	IS NULL
OR
RESTAURANT_ID IS NULL
OR
ORDER_ITEM IS NULL
OR
ORDER_DATE IS NULL
OR
ORDER_TIME IS NULL
OR
ORDER_STATUS IS NULL
OR
TOTAL_AMOUNT IS NULL;

SELECT * FROM DELIVERIES
WHERE
DELIVERY_STATUS IS NULL
OR
DELIVERY_TIME IS NULL
OR	
RIDER_ID IS NULL;	


UPDATE DELIVERIES
SET DELIVERY_TIME =0
WHERE DELIVERY_TIME IS NULL;

-- ---------------------------------------------------
-- Analysis & reports

-- Q1. Top 5 Most Frequently Ordered Dishes

SELECT ORDER_ITEM,COUNT(ORDER_ITEM) AS NO_OF_ORDER
FROM ORDERS
GROUP BY ORDER_ITEM
ORDER BY  NO_OF_ORDER DESC
LIMIT 5;


SELECT * FROM CUSTOMERS;
SELECT * FROM DELIVERIES;
SELECT * FROM ORDERS;
SELECT * FROM RESTAURANTS;
SELECT * FROM RIDERS;

-- Write a query to find the top 5 most frequently ordered dishes by the customer "Arjun Mehta" in the last 6 month from date 2024-06-01 .

WITH TABLE1 AS(
SELECT 
C.CUSTOMER_ID,
C.CUSTOMER_NAME,
O.ORDER_ITEM,
O.ORDER_DATE

   FROM CUSTOMERS AS C
   INNER JOIN 
   ORDERS AS O
   ON C.CUSTOMER_ID=O.CUSTOMER_ID
   
     WHERE
     ORDER_DATE >= '2024-01-01' - INTERVAL 6 MONTH
     AND 
     CUSTOMER_NAME="Arjun Mehta"
     )
     SELECT ORDER_ITEM,COUNT(ORDER_ITEM) AS TOTAL_ORDER
     FROM TABLE1
	 GROUP BY ORDER_ITEM
     ORDER BY TOTAL_ORDER DESC
     LIMIT 5
     ;
     
-- Q3 Identify the time slots during which the most orders are placed, based on  intervals.
WITH CTE AS (
     SELECT * ,
     CASE WHEN ORDER_TIME BETWEEN "6:00:00" AND "11:59:00" THEN "Morning"
          WHEN ORDER_TIME BETWEEN "12:00:00" AND "16:59:00" THEN "Aftrnoon"
          WHEN ORDER_TIME BETWEEN "17:00:00" AND "20:59:00" THEN "Aftrnoon"
          ELSE "Night"
     END AS TIMESLOT
     FROM 
     ORDERS
   )
   SELECT TIMESLOT,COUNT(ORDER_ID)
   FROM CTE
   GROUP BY TIMESLOT
   ORDER BY  2 DESC
   ;
     
     
     

-- Q4 Find the average order value (AOV) per customer who has placed more than 750 orders.

 

WITH AOV_TABLE AS(
SELECT
O.CUSTOMER_ID,
C.CUSTOMER_NAME,
O.TOTAL_AMOUNT
FROM ORDERS AS O
JOIN 
CUSTOMERS AS C
ON O.CUSTOMER_ID = C.CUSTOMER_ID
)
SELECT CUSTOMER_NAME,AVG(TOTAL_AMOUNT) AS AVG_AMOUNT, COUNT(TOTAL_AMOUNT) AS TOTAL_ORDER
FROM AOV_TABLE
GROUP BY CUSTOMER_NAME
HAVING TOTAL_ORDER >=750
;


-- Q5 List the customers who have spent more than 100K in total on food orders.
 
SELECT
C.CUSTOMER_NAME,
SUM(O.TOTAL_AMOUNT) AS TOTAL_AMOUNT ,
COUNT(C.CUSTOMER_ID) AS TOTAL_ORDER

FROM CUSTOMERS AS C
JOIN 
ORDERS AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID  

GROUP BY CUSTOMER_NAME
HAVING TOTAL_AMOUNT >=100000
ORDER BY TOTAL_AMOUNT DESC
;
     
-- Q6 Write a query to find orders that were placed but not delivered.
-- all the records from orders table but if any record not found in deliveries table it means order were placed but not deliverd

SELECT 
R.RESTAURANT_NAME,COUNT(O.ORDER_ID) AS NOT_DELIVERED_ORDERS

FROM ORDERS AS O
LEFT JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID
LEFT JOIN DELIVERIES AS D
ON O.ORDER_ID=D.ORDER_ID

WHERE D.DELIVERY_ID IS NULL
GROUP BY R.RESTAURANT_NAME
ORDER BY 2 DESC
;

-- Q7 Rank restaurants by their total revenue from the last year where current date is 2024-01-01.
SELECT 
R.RESTAURANT_NAME,R.CITY,SUM(O.TOTAL_AMOUNT) AS TOTAL_REVENUE,
RANK()OVER(ORDER BY SUM(O.TOTAL_AMOUNT) DESC) AS RANKER
FROM DELIVERIES AS D
JOIN 
ORDERS AS O
ON D.ORDER_ID=O.ORDER_ID
JOIN
RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID
WHERE O.ORDER_DATE>="2024-01-01" - INTERVAL 1 YEAR
GROUP BY R.CITY,R.RESTAURANT_NAME
ORDER BY 4,1 DESC
;
     
-- Q8 Identify the most popular 2 dish in each city based on the number of orders.
WITH CTE AS (	
SELECT 
R.CITY,O.ORDER_ITEM,COUNT(O.ORDER_ITEM) AS TOTAL_ORDER,
RANK()OVER(PARTITION BY R.CITY ORDER BY COUNT(*) DESC) AS RANKER

FROM 
ORDERS AS O
INNER JOIN
RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID

GROUP BY 1,2)
SELECT * FROM CTE
WHERE RANKER<=2
;


--  Q9 Find customers who haven’t placed an order in 2024 but did in 2023.
-- Customers who has done order in 2023
-- customer who has not done in 2024

SELECT DISTINCT(CUSTOMER_ID) AS CUSTOMER_ID
FROM ORDERS
WHERE 
	YEAR(ORDER_DATE)=2023
    AND
    CUSTOMER_ID NOT IN (
    SELECT DISTINCT(CUSTOMER_ID) AS 2024_ORDER_ID
    FROM ORDERS
    WHERE 
	YEAR(ORDER_DATE)=2024)
;

-- Q 10 Calculate and compare the order cancellation rate for each restaurant between the current year and the previous year.
-- Cancelation rate for 24 and 23 for each restaurant
 
WITH CTE1 AS( 
 SELECT
R.RESTAURANT_ID,
R.RESTAURANT_NAME,
COUNT(CASE WHEN YEAR(O.ORDER_DATE)=2023  THEN 1 END)AS TOTAL_ORDERS_IN_2023,
COUNT(CASE WHEN DELIVERY_ID IS NULL AND YEAR(O.ORDER_DATE)=2023  THEN 1 END)AS ORDERS_NOT_DELIVERD_IN_2023,
COUNT(CASE WHEN YEAR(O.ORDER_DATE)=2024  THEN 1 END)AS TOTAL_ORDERS_IN_2024,
COUNT(CASE WHEN DELIVERY_ID IS NULL AND YEAR(O.ORDER_DATE)=2024  THEN 1 END)AS ORDERS_NOT_DELIVERD_IN_2024

FROM
ORDERS AS O
LEFT JOIN
DELIVERIES AS D
ON D.ORDER_ID=O.ORDER_ID
LEFT JOIN
RESTAURANTS AS R
ON R.RESTAURANT_ID=O.RESTAURANT_ID
GROUP BY 1
ORDER BY 1
)
SELECT RESTAURANT_ID,RESTAURANT_NAME,
ROUND(ORDERS_NOT_DELIVERD_IN_2023/TOTAL_ORDERS_IN_2023,2) AS 2023_CANCELLATION_RATIO,
ROUND(ORDERS_NOT_DELIVERD_IN_2024/TOTAL_ORDERS_IN_2024,2) AS 2024_CANCELLATION_RATIO
FROM CTE1;


-- Q11 Determine each rider's average delivery time.
-- JOIN ORDER,DELIVERIES AND RIDER

WITH CTE AS(
SELECT
O.ORDER_ID,
R.RIDER_ID,
R.RIDER_NAME,
O.ORDER_TIME,
D.DELIVERY_TIME,
(
CASE WHEN
D.DELIVERY_TIME >= O.ORDER_TIME THEN
TIMESTAMPDIFF(MINUTE,O.ORDER_TIME,D.DELIVERY_TIME)
ELSE
ABS(TIMESTAMPDIFF(MINUTE,O.ORDER_TIME,D.DELIVERY_TIME)+1400)
END) AS AVG_DELIVERY_TIME
FROM 
ORDERS AS O
JOIN DELIVERIES AS D
ON O.ORDER_ID=D.ORDER_ID
JOIN RIDERS AS R
ON D.RIDER_ID=R.RIDER_ID
)
SELECT *
FROM CTE
;


-- Q12. Monthly Restaurant Growth Ratio
-- Calculate each restaurant's growth ratio based on the total number of delivered orders since its joining.
WITH CTE AS(
SELECT
R.RESTAURANT_ID,R.RESTAURANT_NAME,
YEAR(O.ORDER_DATE) AS ORDER_YEAR,
MONTHNAME(O.ORDER_DATE) ORDER_MONTH,
COUNT(D.ORDER_ID) AS CURRENT_MONTH_ORDERS,
LAG(COUNT(D.ORDER_ID),1)OVER(PARTITION BY RESTAURANT_ID ORDER BY YEAR(O.ORDER_DATE),MONTHNAME(O.ORDER_DATE) ) AS PREV_MONTH_ORDERS

FROM 
DELIVERIES AS D
JOIN ORDERS AS O
ON D.ORDER_ID=O.ORDER_ID
JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID

WHERE DELIVERY_STATUS="Delivered"
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4
)
SELECT *,
ROUND((((CURRENT_MONTH_ORDERS-PREV_MONTH_ORDERS)/PREV_MONTH_ORDERS)*100),2) AS GROWTH_RATIO
FROM CTE
;

--  Q13 Segment customers into 'Gold' or 'Silver' groups based on their total spending compared to the
-- average order value (AOV). If a customer's total spending exceeds the AOV, label them as
-- 'Gold'; otherwise, label them as 'Silver'.
-- Return: The total number of orders and total revenue for each segment.

WITH CTE AS(
SELECT 
C.CUSTOMER_ID,
C.CUSTOMER_NAME,
SUM(O.TOTAL_AMOUNT) AS TOTAL_ORDER_VALUE,
COUNT(*) AS TOTAL_ORDERS,
(CASE WHEN SUM(O.TOTAL_AMOUNT)>AVG(O.TOTAL_AMOUNT) THEN "Gold" ELSE "Silver" END) AS RATING

FROM
CUSTOMERS AS C
JOIN 
ORDERS AS O
ON C.CUSTOMER_ID= O.CUSTOMER_ID
GROUP BY 1,2
ORDER BY 1
)
SELECT RATING,
SUM(TOTAL_ORDERS) AS TOTAL_ORDERS,
SUM(TOTAL_ORDER_VALUE) AS TOTAL_REVENUE
FROM CTE
GROUP BY 1
;


-- Q14 Rider Monthly Earnings
-- Question:Calculate each rider's total monthly earnings, assuming they earn 8% of the order amount.

SELECT 
R.RIDER_ID,
R.RIDER_NAME,
YEAR(O.ORDER_DATE) AS YEAR,
MONTHNAME(O.ORDER_DATE) AS MONTH,
SUM(O.TOTAL_AMOUNT) AS TOTAL_REVENUE,
SUM(O.TOTAL_AMOUNT)*0.08 AS MONTHLY_EARNING

FROM
DELIVERIES AS D
JOIN
RIDERS AS R
ON D.RIDER_ID=R.RIDER_ID
JOIN
ORDERS AS O
ON O.ORDER_ID= D.ORDER_ID
WHERE D.DELIVERY_STATUS="Delivered"
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4
;

-- Q15. Rider Ratings Analysis
-- Question: Find the number of 5-star, 4-star, and 3-star ratings each rider has.
-- Riders receive ratings based on delivery time:
-- ● 5-star: Delivered in less than 15 minutes
-- ● 4-star: Delivered between 15 and 20 minutes
-- ● 3-star: Delivered after 20 minutes


WITH  CTE AS (
SELECT
O.ORDER_ID,O.ORDER_TIME,D.DELIVERY_TIME,R.RIDER_ID,R.RIDER_NAME,
(CASE WHEN
     DELIVERY_TIME>=ORDER_TIME THEN
     TIMESTAMPDIFF(MINUTE,ORDER_TIME,DELIVERY_TIME)
	 ELSE
     TIMESTAMPDIFF(MINUTE,ORDER_TIME,DELIVERY_TIME)+1440
     END
) AS TIME_MINUTES
FROM
DELIVERIES AS D
JOIN
RIDERS AS R
ON D.RIDER_ID=R.RIDER_ID
JOIN
ORDERS AS O
ON O.ORDER_ID= D.ORDER_ID)
SELECT RIDER_ID,RIDER_NAME,
CASE 
    WHEN TIME_MINUTES < 15 THEN '5-Star'
    WHEN TIME_MINUTES BETWEEN 15 AND 20 THEN '4-Star'
    ELSE '3-Star' 
    END AS RATING,
    COUNT(*) AS RATING_COUNT
    FROM CTE
    GROUP BY 1,2,3
    ORDER BY 1,2,3 DESC
;

-- Q16. Order Frequency by Day
-- Question:Analyze order frequency per day of the week and identify the peak day for each restaurant.

WITH CTE AS (
SELECT
R.RESTAURANT_NAME,
DAYNAME(O.ORDER_DATE) AS DAY,
COUNT(O.ORDER_ID) AS TOTAL_ORDER,
RANK() OVER(PARTITION BY R.RESTAURANT_NAME ORDER BY COUNT(O.ORDER_ID) DESC) AS RANKER
FROM

ORDERS AS O
JOIN
RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID

GROUP BY 1,2
)
SELECT * FROM CTE
WHERE RANKER =1

;


-- Q17. Customer Lifetime Value (CLV)
-- Question:Calculate the total revenue generated by each customer over all their orders.

SELECT
C.CUSTOMER_ID,
C.CUSTOMER_NAME,
SUM(O.TOTAL_AMOUNT)AS TOTAL_REVENUE 
FROM ORDERS AS O
JOIN CUSTOMERS AS C
ON O.CUSTOMER_ID=C.CUSTOMER_ID
GROUP BY 1,2
ORDER BY 1
;



-- Q18. Monthly Sales Trends
-- Question:Identify sales trends by comparing each month's total sales to the previous month.

SELECT 
YEAR(ORDER_DATE) AS YEAR,
MONTHNAME(ORDER_DATE) AS MONTH,
SUM(TOTAL_AMOUNT) AS CURRENT_MONTH_SALES,
LAG(SUM(TOTAL_AMOUNT),1) OVER(ORDER BY YEAR(ORDER_DATE),MONTHNAME(ORDER_DATE)) AS PREVIOUSE_MONTH_SALES,
SUM(TOTAL_AMOUNT)-LAG(SUM(TOTAL_AMOUNT),1) OVER(ORDER BY YEAR(ORDER_DATE),MONTHNAME(ORDER_DATE)) AS DEVIATION
FROM ORDERS
GROUP BY 1,2

;


-- Q19. Order Item Popularity
-- Question:Track the popularity of specific order items over time and identify seasonal demand for each item.
WITH CTE AS(
SELECT
ORDER_ITEM,
      (CASE 
         WHEN MONTH(ORDER_DATE) BETWEEN 3 AND 6 THEN 'Summer'
         WHEN MONTH(ORDER_DATE) BETWEEN 7 AND 9 THEN 'Monsoon'
         ELSE 'winter' END) AS SEASON
,
COUNT(ORDER_ID) AS TOTAL_ORDERS,
RANK()OVER(PARTITION BY ORDER_ITEM ORDER BY COUNT(ORDER_ID) DESC) AS RANKER
FROM ORDERS
GROUP BY 1,2
ORDER BY 1 ,2 
)
SELECT ORDER_ITEM,SEASON,TOTAL_ORDERS FROM CTE
WHERE RANKER=1
;


-- Q20. City Revenue Ranking
-- Question:Rank each city based on the total revenue for the last year (2023).

SELECT
R.CITY,
SUM(O.TOTAL_AMOUNT) AS REVENUE,
RANK()OVER(ORDER BY SUM(TOTAL_AMOUNT) DESC) AS CITY_RANK
FROM 
ORDERS AS O
JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID=R.RESTAURANT_ID
GROUP BY 1
;


